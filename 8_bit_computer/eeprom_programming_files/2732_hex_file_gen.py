# Define the microcode data as in the Arduino code
data = [
    0b1100000000000000, 0b1000100000000000, 0, 0, 0, 0, 0, 0,  # 0000 - NOP
    0b1100000000000000, 0b1000100000000000, 0b1000000000000000, 0b1000000000000000, 0, 0, 0, 0,  # 0001 - LDA
    0b1100000000000000, 0b1000100000000000, 0b1000000000000000, 0b1000000000000000, 0b1000000000000000, 0, 0, 0,  # 0010 - ADD
    0b1100000000000000, 0b1000100000000000, 0b1000000000000000, 0b1000000000000000, 0b1000000000000000, 0, 0, 0,  # 0011 - SUB
    0b1100000000000000, 0b1000100000000000, 0b1000000000000000, 0b1000000000000000, 0, 0, 0, 0,  # 0100 - STA
    0b1100000000000000, 0b1000100000000000, 0b1000000000000000, 0, 0, 0, 0, 0,  # 0101 - LDI
    0b1100000000000000, 0b1000100000000000, 0b1000000000000000, 0, 0, 0, 0, 0,  # 0110 - JMP
    0b1100000000000000, 0b1000100000000000, 0, 0, 0, 0, 0, 0,  # 0111
    0b1100000000000000, 0b1000100000000000, 0, 0, 0, 0, 0, 0,  # 1000
    0b1100000000000000, 0b1000100000000000, 0, 0, 0, 0, 0, 0,  # 1001
    0b1100000000000000, 0b1000100000000000, 0, 0, 0, 0, 0, 0,  # 1010
    0b1100000000000000, 0b1000100000000000, 0, 0, 0, 0, 0, 0,  # 1011
    0b1100000000000000, 0b1000100000000000, 0, 0, 0, 0, 0, 0,  # 1100
    0b1100000000000000, 0b1000100000000000, 0, 0, 0, 0, 0, 0,  # 1101
    0b1100000000000000, 0b1000100000000000, 0b1000000000000000, 0, 0, 0, 0, 0,  # 1110 - OUT
    0b1100000000000000, 0b1000100000000000, 0b1100000000000000, 0, 0, 0, 0, 0,  # 1111 - HLT
]

# Split 16-bit instructions into high and low bytes
binary_data = bytearray()
for instruction in data:
    binary_data.append((instruction >> 8) & 0xFF)  # High byte
    binary_data.append(instruction & 0xFF)         # Low byte

# Write binary data to a file
with open("eeprom_image.bin", "wb") as f:
    f.write(binary_data)

print("Binary file 'eeprom_image.bin' created successfully!")
